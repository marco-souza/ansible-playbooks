# Pkgx Setup
# ===============
  [ ! -x "$(command -v pkgx)" ] && curl -fsS https://pkgx.sh | sh
  source <(pkgx --shellcode)  #docs.pkgx.sh/shellcode


# OCaml Setup
# ===============
  [ ! -x "$(command -v opam)" ] && \
    curl -fsSL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh | sh


# Go Setup
# ===============
  export GOPATH=$WORKSPACE/go
  export GO_BIN=$HOME/.local/share
  export GO_GLOBAL=$GO_BIN/go/bin
  export PATH=$PATH:$GOPATH/bin:$GO_GLOBAL
  [ ! -e $GOPATH ] && mkdir -p $GOPATH
  [ ! -x "$(command -v go)" ] && \
    env +go +gopls


# Rust Setup
# =================
  export RUST_HOME="$HOME/.cargo"
  export RUST_BIN="$RUST_HOME/bin"
  export PATH=$PATH:$RUST_BIN

  # install rust
  [ ! -e $RUST_HOME ] && mkdir -p $RUST_HOME
  [ ! -e $RUST_BIN ] && mkdir -p $RUST_BIN
  [ ! -x "$(command -v cargo)" ] || [ ! -x "$(command -v rustc)" ] && \
    env +rust +rustup +cargo && \
    rustup default stable

  # install rust-analyzer
  [ ! -f $RUST_BIN/rust-analyzer ] &&
    rustup component add rust-src && \
    rustup component add rust-analyzer && \
    ln -s $(rustup which --toolchain stable rust-analyzer) $RUST_BIN

  [ -e $RUST_HOME/env ] && source "$RUST_HOME/env"

  # install helix
  [ ! -f $RUST_BIN/hx ] && cargo install hx


# Deno Setup
# =================
  export DENO_HOME="$HOME/.deno"
  export PATH=$PATH:$DENO_HOME/bin
  [ ! -e $DENO_HOME ] && mkdir -p $DENO_HOME
  [ ! -x "$(command -v deno)" ] && env +deno


# Node Setup
# =================
  ## npm
  export NPM_HOME=$HOME/.npm-global
  export PATH=$PATH:$NPM_HOME/bin
  # install
  [ ! -e $NPM_HOME ] && mkdir -p $NPM_HOME
  [ ! -x "$(command -v node)" ] && env +node +npm
  # setup
  npm config set prefix $NPM_HOME

  ## n
  export N_PREFIX=$HOME/.local/share
  export N_HOME=$N_PREFIX/n
  export PATH=$PATH:$N_PREFIX/bin
  [ ! -e $N_HOME ] && mkdir -p $N_HOME
  [ ! -x "$(command -v n)" ] && npm i -g n

  ## yarn
  export YARN_HOME=$HOME/.config/yarn
  export PATH=$PATH:$YARN_HOME/global/node_modules/.bin
  if [ ! -e $YARN_HOME ]; then
    npm i -g yarn
    mkdir -p $YARN_HOME
  fi

  ## pnpm
  export PNPM_HOME=$HOME/.local/share/pnpm
  export PATH=$PATH:$PNPM_HOME
  if [ ! -e $PNPM_HOME ]; then
    npm i -g pnpm pnpx
    mkdir -p $PNPM_HOME
  fi


# Bun Setup
# =================
  export BUN_HOME="$HOME/.bun"
  export PATH="$BUN_HOME/bin:$PATH"
  # install
  [ ! -x "$(command -v bun)" ] && env +bun

